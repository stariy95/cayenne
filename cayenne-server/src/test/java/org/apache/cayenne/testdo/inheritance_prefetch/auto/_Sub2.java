package org.apache.cayenne.testdo.inheritance_prefetch.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.inheritance_prefetch.Dep1;
import org.apache.cayenne.testdo.inheritance_prefetch.Dep2;
import org.apache.cayenne.testdo.inheritance_prefetch.Root;

/**
 * Class _Sub2 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Sub2 extends Root {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> FIELD = PropertyFactory.createString("field", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<Integer> TYPE = PropertyFactory.createNumeric("type", Integer.class);
    public static final EntityProperty<Dep1> DEP1 = PropertyFactory.createEntity("dep1", Dep1.class);
    public static final EntityProperty<Dep2> DEP2 = PropertyFactory.createEntity("dep2", Dep2.class);

    protected String field;
    protected String name;
    protected int type;

    protected Object dep1;
    protected Object dep2;

    public void setField(String field) {
        beforePropertyWrite("field", this.field, field);
        this.field = field;
    }

    public String getField() {
        beforePropertyRead("field");
        return this.field;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setType(int type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public int getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setDep1(Dep1 dep1) {
        setToOneTarget("dep1", dep1, true);
    }

    public Dep1 getDep1() {
        return (Dep1)readProperty("dep1");
    }

    public void setDep2(Dep2 dep2) {
        setToOneTarget("dep2", dep2, true);
    }

    public Dep2 getDep2() {
        return (Dep2)readProperty("dep2");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "field":
                return this.field;
            case "name":
                return this.name;
            case "type":
                return this.type;
            case "dep1":
                return this.dep1;
            case "dep2":
                return this.dep2;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "field":
                this.field = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "type":
                this.type = val == null ? 0 : (int)val;
                break;
            case "dep1":
                this.dep1 = val;
                break;
            case "dep2":
                this.dep2 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.field);
        out.writeObject(this.name);
        out.writeInt(this.type);
        out.writeObject(this.dep1);
        out.writeObject(this.dep2);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.field = (String)in.readObject();
        this.name = (String)in.readObject();
        this.type = in.readInt();
        this.dep1 = in.readObject();
        this.dep2 = in.readObject();
    }

}
