package org.apache.cayenne.crypto.db.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Table1 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Table1 extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Integer> CRYPTO_INT = Property.create("cryptoInt", Integer.class);
    public static final Property<String> CRYPTO_STRING = Property.create("cryptoString", String.class);
    public static final Property<Integer> PLAIN_INT = Property.create("plainInt", Integer.class);
    public static final Property<String> PLAIN_STRING = Property.create("plainString", String.class);

    protected int cryptoInt;
    protected String cryptoString;
    protected int plainInt;
    protected String plainString;


    public void setCryptoInt(int cryptoInt) {
        beforePropertyWrite("cryptoInt", this.cryptoInt, cryptoInt);
        this.cryptoInt = cryptoInt;
    }

    public int getCryptoInt() {
        beforePropertyRead("cryptoInt");
        return this.cryptoInt;
    }

    public void setCryptoString(String cryptoString) {
        beforePropertyWrite("cryptoString", this.cryptoString, cryptoString);
        this.cryptoString = cryptoString;
    }

    public String getCryptoString() {
        beforePropertyRead("cryptoString");
        return this.cryptoString;
    }

    public void setPlainInt(int plainInt) {
        beforePropertyWrite("plainInt", this.plainInt, plainInt);
        this.plainInt = plainInt;
    }

    public int getPlainInt() {
        beforePropertyRead("plainInt");
        return this.plainInt;
    }

    public void setPlainString(String plainString) {
        beforePropertyWrite("plainString", this.plainString, plainString);
        this.plainString = plainString;
    }

    public String getPlainString() {
        beforePropertyRead("plainString");
        return this.plainString;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cryptoInt":
                return this.cryptoInt;
            case "cryptoString":
                return this.cryptoString;
            case "plainInt":
                return this.plainInt;
            case "plainString":
                return this.plainString;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cryptoInt":
                this.cryptoInt = val == null ? 0 : (Integer)val;
                break;
            case "cryptoString":
                this.cryptoString = (String)val;
                break;
            case "plainInt":
                this.plainInt = val == null ? 0 : (Integer)val;
                break;
            case "plainString":
                this.plainString = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.cryptoInt);
        out.writeObject(this.cryptoString);
        out.writeInt(this.plainInt);
        out.writeObject(this.plainString);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cryptoInt = in.readInt();
        this.cryptoString = (String)in.readObject();
        this.plainInt = in.readInt();
        this.plainString = (String)in.readObject();
    }

}
